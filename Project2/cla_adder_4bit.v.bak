module cla_adder_4bit(
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output cout
);
    wire [3:0] g, p;
    wire c1, c2, c3, c4, c5;

    // Instantiate generate and propagate units for each bit
    generate_propagate_unit gp0(a[0], b[0], g[0], p[0]);
    generate_propagate_unit gp1(a[1], b[1], g[1], p[1]);
    generate_propagate_unit gp2(a[2], b[2], g[2], p[2]);
    generate_propagate_unit gp3(a[3], b[3], g[3], p[3]);

    // Carry look-ahead logic
    // Calculate carry for each bit
    and and0(c1, p[0], cin);
    or or0(cout[0], g[0], c1);

    and and1_0(c1, p[1], g[0]);
    and and1_1(c2, p[1], p[0], cin);
    or or1(cout[1], g[1], c1, c2);

    and and2_0(c1, p[2], g[1]);
    and and2_1(c2, p[2], p[1], g[0]);
    and and2_2(c3, p[2], p[1], p[0], cin);
    or or2(cout[2], g[2], c1, c2, c3);

    and and3_0(c1, p[3], g[2]);
    and and3_1(c2, p[3], p[2], g[1]);
    and and3_2(c3, p[3], p[2], p[1], g[0]);
    and and3_3(c4, p[3], p[2], p[1], p[0], cin);
    or or3(cout[3], g[3], c1, c2, c3, c4);

    // Sum calculation
    xor sum0(sum[0], p[0], cin);
    xor sum1(sum[1], p[1], cout[0]);
    xor sum2(sum[2], p[2], cout[1]);
    xor sum3(sum[3], p[3], cout[2]);
endmodule
